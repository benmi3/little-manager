# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
#  - test
  - codescan-1
  - codescan-2
  - release 

# image: rust:latest
#
# variables:
#   POSTGRES_DB: $POSTGRES_DB
#   POSTGRES_PASSWORD: $POSTGRES_PASSWORD
#   POSTGRES_HOST_AUTH_METHOD: trust
#   SERVICE_DB_URL: "postgres://postgres:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB"
#
# services:
#   - name: postgres
#     alias: postgres
#     variables:
#       POSTGRES_DB: $POSTGRES_DB
#       POSTGRES_PASSWORD: $POSTGRES_PASSWORD
#       POSTGRES_HOST_AUTH_METHOD: trust
#
# test:
#   stage: test
#   image: rust:latest 
#   before_script:
#     - apt-get update && apt-get install -y postgresql-client || echo "Failed to install postgresql-client, pg_isready might not be available"
#   script:
#     - echo "Waiting for PostgreSQL to be ready..."
#     - |
#       timeout 60s bash -c '
#       # Try pg_isready if it was installed
#       if command -v pg_isready &> /dev/null; then
#         until pg_isready -h postgres -p 5432 -U postgres -d "${POSTGRES_DB:-app_db}"; do # Use postgres as default user
#           echo "Postgres is unavailable - sleeping"
#           sleep 2
#         done
#       else # Fallback to a simple sleep if pg_isready is not available
#         echo "pg_isready not found, sleeping for 15 seconds as a fallback..."
#         sleep 15
#       fi
#       echo "Postgres should be up - executing tests"
#       '
#     - "cargo test -- --nocapture --test-threads=1 > coverage.out"
#   artifacts:
#     # Save the coverage report file as an artifact
#     paths:
#       - coverage.out
#     expire_in: 1 week
#     when: always
# #  allow_failure: true # temp
#   only:
#     - merge_requests
#     - master
#     - develop
#     - main
#     - dev
include:
  - template: Jobs/SAST.gitlab-ci.yml

sast:
  stage: codescan-1
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.rs'
        # include any other file extensions you need to scan from the semgrep-sast template: Jobs/SAST.gitlab-ci.yml

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
sonarcloud-check:
  stage: codescan-2
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master
    - develop
    - main
    - dev

release:
  stage: release
  image: docker:stable
  services:
    - docker:dind

  artifacts:
    paths:
      - dist/
    expire_in: 1 week # Optional: How long to keep artifacts

  rules:
    - if: $CI_COMMIT_TAG

  variables:
    DOCKER_REGISTRY: $CI_REGISTRY
    DOCKER_USERNAME: $CI_REGISTRY_USER
    DOCKER_PASSWORD: $CI_REGISTRY_PASSWORD
    GIT_DEPTH: 0
    GITLAB_TOKEN: $GO_RELEASE_TOKEN

  script: |
    docker run --rm --privileged \
      -v $PWD:/go/src/gitlab.com/benmi/little-manager \
      -w /go/src/gitlab.com/benmi/little-manager \
      -v /var/run/docker.sock:/var/run/docker.sock \
      -e DOCKER_USERNAME -e DOCKER_PASSWORD -e DOCKER_REGISTRY  \
      -e GITLAB_TOKEN \
      goreleaser/goreleaser release --clean


